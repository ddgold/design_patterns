Installing from GIT
===================

Last update: Feb 2, 2014

GIT  (http://git-scm.com/)  is  the  recommended    way   to  track  the
development, especially if you plan to   maintain  a modified version or
want to submit patches.

Downloading
-----------

First, download the SWI-Prolog source using git.  This takes a while the
first time, but subsequent updates will be fast:

    % git clone git://www.swi-prolog.org/home/pl/git/pl-devel.git

If you have the poor luck that  you   are  behind a firewall that blocks
GIT's default port (9418), you can use this alternative.

    % git clone http://www.swi-prolog.org/home/pl/git/pl-devel.git

After cloning the main repository, you have to fetch generated files and
Prolog packages that are distributed as separate git submodules. This is
done with the script `prepare`. The `prepare` script requires `curl` and
GNU `autoconf`.

    % cd pl-devel
    % ./prepare

If this step completed successfully, you are  at the same point as after
downloading the sources as a tarball and unpacking.

Next, continue as described in INSTALL

Submitting a patch
------------------

GIT is very good at structured   handling of distributed development. If
you want to submit a patch, use   git-format-patch to create the content
of an e-mail message. Depending on  the   nature,  send the patch to the
SWI-Prolog mailinglist or bugs@swi-prolog.org.


Updating
--------

If you made no branches and patches, you update to the latest using

	% make distclean
	% git pull
	% ./prepare
	% ./build	(see using of the build script in INSTALL.notes)

If you have patches, this is slightly  more difficult. You can keep your
history clean using this instead of the simple pull above:

	% make distclean
	% git checkout master
	% git pull
	% git checkout my-branch
	% git rebase master
	% ./prepare
	% ./build


Submitting patches
------------------

Please consult http://www.swi-prolog.org/howto/SubmitPatch.html   if you
want to submit patches. By default, try to get modifications and patches
accepted in the main source because:

  1. It simplifies updating for you
  2. Your patch will be kept consistent with the rest of the source
  3. Other users may improve or fix your patch
  4. You can become famous
  5. Other users will profit too
